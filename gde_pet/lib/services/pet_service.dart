import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:geoflutterfire_plus/geoflutterfire_plus.dart';
import 'package:image_picker/image_picker.dart';
import '../models/pet_model.dart';

class PetService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseStorage _storage = FirebaseStorage.instance;

  Future<void> addSighting(String petId, GeoPoint location, String userId) async {
    try {
      print('PetService: Adding sighting for pet $petId');
      print('Location: ${location.latitude}, ${location.longitude}');
      print('User ID: $userId');
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º timestamp
      final now = DateTime.now();
      final sightingData = {
        'latitude': location.latitude,
        'longitude': location.longitude,
        'userId': userId,
        'timestamp': now.toIso8601String(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º ISO —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ FieldValue
        'googleMapsUrl': 'https://maps.google.com/?q=${location.latitude},${location.longitude}',
      };
      
      print('Sighting data: $sightingData');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
      final petDoc = await _firestore.collection('pets').doc(petId).get();
      
      if (!petDoc.exists) {
        throw '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ –æ—Ç–º–µ—Ç–æ–∫
      final currentData = petDoc.data();
      List<dynamic> currentSightings = List.from(currentData?['sightings'] ?? []);
      
      print('Current sightings count: ${currentSightings.length}');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ç–º–µ—Ç–∫—É
      currentSightings.add(sightingData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
      await _firestore.collection('pets').doc(petId).update({
        'sightings': currentSightings,
        'updatedAt': now.toIso8601String(),
      });
      
      print('PetService: Sighting added successfully');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
      await _sendSightingNotification(petId, userId, location, currentData);
      
    } catch (e) {
      print('PetService (addSighting) error: $e');
      print('Error type: ${e.runtimeType}');
      throw '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏: $e';
    }
  }
  
  Future<void> _sendSightingNotification(
    String petId, 
    String sighterId, 
    GeoPoint location,
    Map<String, dynamic>? petData,
  ) async {
    try {
      if (petData == null) return;
      
      final ownerId = petData['userId'] as String?;
      final petName = petData['petName'] as String? ?? '–ø–∏—Ç–æ–º—Ü–∞';
      
      if (ownerId == null || ownerId == sighterId) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ–ª –ø–∏—Ç–æ–º—Ü–∞
      final sighterDoc = await _firestore.collection('users').doc(sighterId).get();
      final sighterData = sighterDoc.data();
      final sighterName = sighterData?['firstName'] ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      // –°–æ–∑–¥–∞–µ–º ID —á–∞—Ç–∞
      List<String> ids = [ownerId, sighterId];
      ids.sort();
      final chatId = ids.join('_');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
      final chatDoc = await _firestore.collection('chats').doc(chatId).get();
      
      if (!chatDoc.exists) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
        final ownerDoc = await _firestore.collection('users').doc(ownerId).get();
        final ownerData = ownerDoc.data();
        
        if (ownerData != null) {
          await _firestore.collection('chats').doc(chatId).set({
            'users': [ownerId, sighterId],
            'lastMessage': '',
            'lastMessageTimestamp': Timestamp.now(),
            'userNames': {
              ownerId: ownerData['firstName'] ?? '–í–ª–∞–¥–µ–ª–µ—Ü',
              sighterId: sighterName,
            },
            'userPhotos': {
              ownerId: ownerData['photoURL'],
              sighterId: sighterData?['photoURL'],
            },
          });
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      final googleMapsUrl = 'https://maps.google.com/?q=${location.latitude},${location.longitude}';
      final message = 'üëÄ –Ø –≤–∏–¥–µ–ª(–∞) –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ "$petName"!\n\n'
          'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n'
          '–®–∏—Ä–æ—Ç–∞: ${location.latitude.toStringAsFixed(6)}\n'
          '–î–æ–ª–≥–æ—Ç–∞: ${location.longitude.toStringAsFixed(6)}\n\n'
          'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ: $googleMapsUrl\n\n'
          '‚è∞ ${_formatDateTime(DateTime.now())}';
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .add({
        'senderId': sighterId,
        'receiverId': ownerId,
        'text': message,
        'timestamp': Timestamp.now(),
        'sightingLocation': {
          'latitude': location.latitude,
          'longitude': location.longitude,
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      await _firestore.collection('chats').doc(chatId).update({
        'lastMessage': 'üëÄ –í–∏–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!',
        'lastMessageTimestamp': Timestamp.now(),
      });
      
      print('PetService: Notification sent successfully');
    } catch (e) {
      print('PetService (_sendSightingNotification) error: $e');
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
  }

  String _formatDateTime(DateTime dateTime) {
    final months = [
      '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    
    return '${dateTime.day} ${months[dateTime.month - 1]} ${dateTime.year} –≤ ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }
  Future<String> createPet(PetModel pet) async {
    try {
      final docRef = await _firestore.collection('pets').add(pet.toJson());
      return docRef.id;
    } catch (e) {
      print('PetService (createPet) error: $e');
      throw '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e';
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–∏—Ç–æ–º—Ü–∞
  Future<List<String>> uploadPetPhotos(String petId, List<XFile> images) async {
    try {
      List<String> urls = [];
      
      for (int i = 0; i < images.length; i++) {
        final ref = _storage.ref().child('pets/$petId/photo_$i.jpg');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º readAsBytes() –∏ putData() –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        final bytes = await images[i].readAsBytes();
        final uploadTask = await ref.putData(bytes);
        
        final url = await uploadTask.ref.getDownloadURL();
        urls.add(url);
      }
      
      return urls;
    } catch (e) {
      print('PetService (uploadPetPhotos) error: $e');
      throw '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: $e';
    }
  }


  Future<void> updatePetField(String id, Map<String, dynamic> fields) async {
  try {
    print('PetService: Updating pet fields for ID: $id');
    print('Fields: $fields');
    await _firestore.collection('pets').doc(id).update(fields);
    print('PetService: Pet fields updated successfully');
  } catch (e) {
    print('PetService (updatePetField) error: $e');
    throw '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e';
  }
}

// –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
Future<void> deletePet(String id) async {
  try {
    print('PetService: Deleting pet with ID: $id');
    
    final pet = await getPetById(id);
    
    if (pet != null && pet.imageUrls.isNotEmpty) {
      for (String imageUrl in pet.imageUrls) {
        try {
          final ref = _storage.refFromURL(imageUrl);
          await ref.delete();
          print('PetService: Deleted image: $imageUrl');
        } catch (e) {
          print('PetService: Failed to delete image $imageUrl: $e');
        }
      }
    }
    
    await _firestore.collection('pets').doc(id).delete();
    print('PetService: Pet deleted successfully');
  } catch (e) {
    print('PetService (deletePet) error: $e');
    throw '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e';
  }
}

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  Future<List<PetModel>> getAllActivePets() async {
    try {
      final snapshot = await _firestore
          .collection('pets')
          .where('isActive', isEqualTo: true)
          .orderBy('createdAt', descending: true)
          .get();

      return snapshot.docs
          .map((doc) => PetModel.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      print('PetService (getAllActivePets) error: $e');
      throw '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: $e';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
  Future<List<PetModel>> getPetsByStatus(PetStatus status) async {
    try {
      final statusString = status.toString().split('.').last;
      
      final snapshot = await _firestore
          .collection('pets')
          .where('status', isEqualTo: statusString)
          .where('isActive', isEqualTo: true)
          .orderBy('createdAt', descending: true)
          .get();

      return snapshot.docs
          .map((doc) => PetModel.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      print('PetService (getPetsByStatus) error: $e');
      throw '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: $e';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<PetModel>> getUserPets(String userId) async {
    try {
      final snapshot = await _firestore
          .collection('pets')
          .where('userId', isEqualTo: userId)
          .orderBy('createdAt', descending: true)
          .get();

      return snapshot.docs
          .map((doc) => PetModel.fromJson({...doc.data(), 'id': doc.id}))
          .toList();
    } catch (e) {
      print('PetService (getUserPets) error: $e');
      throw '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID
  Future<PetModel?> getPetById(String id) async {
    try {
      final doc = await _firestore.collection('pets').doc(id).get();
      
      if (!doc.exists || doc.data() == null) {
        return null;
      }
      
      return PetModel.fromJson({...doc.data()!, 'id': doc.id});
      
    } catch (e) {
      print('PetService (getPetById) error: $e');
      throw '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e';
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  Future<void> updatePet(String id, PetModel pet) async {
    try {
      await _firestore.collection('pets').doc(id).update(pet.toJson());
    } catch (e) {
      print('PetService (updatePet) error: $e');
      throw '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e';
    }
  }

  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  Future<void> deactivatePet(String id) async {
    try {
      await _firestore.collection('pets').doc(id).update({
        'isActive': false,
        'updatedAt': DateTime.now().toIso8601String(),
      });
    } catch (e) {
      print('PetService (deactivatePet) error: $e');
      throw '–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e';
    }
  }

  // –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ä—è–¥–æ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É—è GeoHash)
  Future<List<PetModel>> searchNearbyPets({
    required double latitude,
    required double longitude,
    double radiusKm = 5.0,
  }) async {
    try {
      final center = GeoFirePoint(GeoPoint(latitude, longitude));
      final collectionRef = _firestore.collection('pets');
      
      final geoQuery = GeoCollectionReference(collectionRef)
          .subscribeWithin(
            center: center,
            radiusInKm: radiusKm,
            field: 'geohash',
            geopointFrom: (data) {
              final lat = data['latitude'] as double?;
              final lon = data['longitude'] as double?;
              
              if (lat != null && lon != null) {
                return GeoPoint(lat, lon);
              }
              throw Exception('Invalid GeoPoint data in document. Document will be skipped.');
            },
            strictMode: true,
          );
      
      final querySnapshot = await geoQuery.first;
      
      final pets = querySnapshot
          .where((doc) {
            final data = doc.data() as Map<String, dynamic>?;
            return data?['isActive'] == true;
          })
          .map((doc) {
            final data = doc.data() as Map<String, dynamic>;
            return PetModel.fromJson({...data, 'id': doc.id});
          })
          .toList();
      
      return pets;
    } catch (e) {
      print('PetService (searchNearbyPets) error: $e');
      throw '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: $e';
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  Stream<List<PetModel>> streamNearbyPets({
    required double latitude,
    required double longitude,
    double radiusKm = 5.0,
  }) {
    try {
      final center = GeoFirePoint(GeoPoint(latitude, longitude));
      final collectionRef = _firestore.collection('pets');
      
      return GeoCollectionReference(collectionRef)
          .subscribeWithin(
            center: center,
            radiusInKm: radiusKm,
            field: 'geohash',
            geopointFrom: (data) {
              final lat = data['latitude'] as double?;
              final lon = data['longitude'] as double?;
              
              if (lat != null && lon != null) {
                return GeoPoint(lat, lon);
              }
              throw Exception('Invalid GeoPoint data in document. Document will be skipped.');
            },
            strictMode: true,
          )
          .map((querySnapshot) {
            return querySnapshot
                .where((doc) {
                  final data = doc.data() as Map<String, dynamic>?;
                  return data?['isActive'] == true;
                })
                .map((doc) {
                  final data = doc.data() as Map<String, dynamic>;
                  return PetModel.fromJson({...data, 'id': doc.id});
                })
                .toList();
          });
    } catch (e) {
      print('PetService (streamNearbyPets) error: $e');
      rethrow; 
    }
  }
}


import 'package:flutter/material.dart';
import 'dart:async';
import 'package:gde_pet/features/messenger/chat_detail_screen.dart';
import 'package:gde_pet/services/chat_service.dart';
import 'package:geolocator/geolocator.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import '../../models/pet_model.dart';
import 'package:provider/provider.dart';
import '../../providers/auth_provider.dart';
import '../../providers/favorites_provider.dart';
import '../../providers/pet_provider.dart';

class PetDetailScreen extends StatefulWidget {
  final PetModel pet;
  
  const PetDetailScreen({super.key, required this.pet});

  @override
  State<PetDetailScreen> createState() => _PetDetailScreenState();
}

class _PetDetailScreenState extends State<PetDetailScreen> {

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π iOS/iPad
void _sharePet() async {
  try {
    final pet = widget.pet;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    final statusEmoji = pet.status == PetStatus.lost ? 'üÜò' : '‚úÖ';
    final statusText = pet.status == PetStatus.lost ? '–ü—Ä–æ–ø–∞–ª(–∞)' : '–ù–∞–π–¥–µ–Ω(–∞)';
    
    String locationInfo = '';
    if (pet.address != null && pet.address!.isNotEmpty) {
      locationInfo = '\nüìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${pet.address}';
    } else if (pet.latitude != null && pet.longitude != null) {
      locationInfo = '\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${pet.latitude!.toStringAsFixed(6)}, ${pet.longitude!.toStringAsFixed(6)}\n'
                     'üó∫Ô∏è –ö–∞—Ä—Ç–∞: https://maps.google.com/?q=${pet.latitude},${pet.longitude}';
    }
    
    String contactInfo = '';
    if (pet.contactPhone != null && pet.contactPhone!.isNotEmpty) {
      contactInfo += '\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${pet.contactPhone}';
    }
    if (pet.contactTelegram != null && pet.contactTelegram!.isNotEmpty) {
      contactInfo += '\n‚úàÔ∏è Telegram: ${pet.contactTelegram}';
    }
    
    final text = '$statusEmoji –í–Ω–∏–º–∞–Ω–∏–µ! $statusText ${pet.type.displayName.toLowerCase()}!\n\n'
                 'üêæ –ö–ª–∏—á–∫–∞: ${pet.petName}\n'
                 'üìã –ü—Ä–∏–º–µ—Ç—ã: ${pet.description}$locationInfo'
                 '$contactInfo\n\n'
                 'üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${pet.ownerName}\n\n'
                 'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: GdePet\n'
                 '–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø–∏—Ç–æ–º—Ü–∞!';

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ iPad
    final box = context.findRenderObject() as RenderBox?;
    final sharePositionOrigin = box != null
        ? box.localToGlobal(Offset.zero) & box.size
        : null;

    // Share.share —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è iPad
    await Share.share(
      text,
      subject: '$statusText ${pet.type.displayName} "${pet.petName}"',
      sharePositionOrigin: sharePositionOrigin,
    );
    
    print('Share dialog opened successfully');
    
  } catch (e) {
    print('Error sharing: $e');
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.error_outline, color: Colors.white),
              const SizedBox(width: 8),
              Expanded(
                child: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é: ${e.toString()}'),
              ),
            ],
          ),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
          action: SnackBarAction(
            label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
            textColor: Colors.white,
            onPressed: () => _sharePet(),
          ),
        ),
      );
    }
  }
}

Future<void> _callForHelp() async {
  final pet = widget.pet;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
  final method = await showDialog<String>(
    context: context,
    builder: (context) => AlertDialog(
      title: const Row(
        children: [
          Text('üÜò –ü–æ–∑–≤–∞—Ç—å –Ω–∞ –ø–æ–º–æ—â—å'),
        ],
      ),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏:',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.chat, size: 16, color: Color(0xFF25D366)),
                    SizedBox(width: 8),
                    Text('WhatsApp', style: TextStyle(fontWeight: FontWeight.w500)),
                    Text(' - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', style: TextStyle(fontSize: 12)),
                  ],
                ),
                SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.phone, size: 16, color: Colors.blue),
                    SizedBox(width: 8),
                    Text('–ü–æ–∑–≤–æ–Ω–∏—Ç—å', style: TextStyle(fontWeight: FontWeight.w500)),
                    Text(' - –ø—Ä—è–º–æ–π –∑–≤–æ–Ω–æ–∫', style: TextStyle(fontSize: 12)),
                  ],
                ),
                SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.message, size: 16, color: Colors.green),
                    SizedBox(width: 8),
                    Text('SMS', style: TextStyle(fontWeight: FontWeight.w500)),
                    Text(' - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', style: TextStyle(fontSize: 12)),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('–û—Ç–º–µ–Ω–∞'),
        ),
        TextButton(
          onPressed: () => Navigator.pop(context, 'sms'),
          child: const Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.message, size: 18),
              SizedBox(width: 4),
              Text('SMS'),
            ],
          ),
        ),
        TextButton(
          onPressed: () => Navigator.pop(context, 'call'),
          child: const Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.phone, size: 18),
              SizedBox(width: 4),
              Text('–ü–æ–∑–≤–æ–Ω–∏—Ç—å'),
            ],
          ),
        ),
        ElevatedButton(
          onPressed: () => Navigator.pop(context, 'whatsapp'),
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF25D366), // WhatsApp color
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
          ),
          child: const Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.chat, size: 18, color: Colors.white),
              SizedBox(width: 4),
              Text('WhatsApp', style: TextStyle(color: Colors.white)),
            ],
          ),
        ),
      ],
    ),
  );

  if (method == null) return;

  const String phone = '77771959900';
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
  String locationInfo;
  if (pet.address != null && pet.address!.isNotEmpty) {
    locationInfo = pet.address!;
  } else if (pet.latitude != null && pet.longitude != null) {
    locationInfo = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${pet.latitude}, ${pet.longitude}\n'
                   '–ö–∞—Ä—Ç–∞: https://maps.google.com/?q=${pet.latitude},${pet.longitude}';
  } else {
    locationInfo = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  final message = 'üÜò –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å!\n\n'
                  'üêæ –ñ–∏–≤–æ—Ç–Ω–æ–µ: ${pet.petName}\n'
                  'üìã –¢–∏–ø: ${pet.type.displayName}\n'
                  'üìù –ü—Ä–∏–º–µ—Ç—ã: ${pet.description}\n\n'
                  'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n$locationInfo\n\n'
                  'üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${pet.ownerName}\n'
                  'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: GdePet';

  try {
    Uri uri;
    
    switch (method) {
      case 'whatsapp':
        uri = Uri.parse("https://wa.me/$phone?text=${Uri.encodeComponent(message)}");
        break;
      case 'call':
        uri = Uri.parse('tel:+$phone');
        break;
      case 'sms':
        uri = Uri.parse('sms:+$phone?body=${Uri.encodeComponent(message)}');
        break;
      default:
        return;
    }
    
    if (await canLaunchUrl(uri)) {
      final launched = await launchUrl(uri, mode: LaunchMode.externalApplication);
      
      if (!launched && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ${_getMethodName(method)}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${_getMethodName(method)} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    }
  } catch (e) {
    print('Error calling for help: $e');
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
}

String _getMethodName(String method) {
  switch (method) {
    case 'whatsapp':
      return 'WhatsApp';
    case 'call':
      return '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤';
    case 'sms':
      return '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è SMS';
    default:
      return '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
  }
}
  Future<void> _handleSeenSighting() async {
    final authProvider = context.read<AuthProvider>();
    
    if (authProvider.user == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üëÄ –í–∏–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞?'),
        content: const Text(
          '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –Ω–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞!\n\n'
          '–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤ —á–∞—Ç '
          '–≤–º–µ—Å—Ç–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Maps.\n\n'
          '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.',
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
            ),
            child: const Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    if (!mounted) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const Center(
        child: Card(
          child: Padding(
            padding: EdgeInsets.all(20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(color: Color(0xFFEE8A9A)),
                SizedBox(height: 16),
                Text('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...'),
              ],
            ),
          ),
        ),
      ),
    );

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        if (mounted) {
          Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text('–í–∫–ª—é—á–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'),
              backgroundColor: Colors.orange,
              action: SnackBarAction(
                label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                textColor: Colors.white,
                onPressed: () async {
                  await Geolocator.openLocationSettings();
                },
              ),
            ),
          );
        }
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          if (mounted) {
            Navigator.of(context).pop();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω'),
                backgroundColor: Colors.red,
              ),
            );
          }
          return;
        }
      }
      
      if (permission == LocationPermission.deniedForever) {
        if (mounted) {
          Navigator.of(context).pop();
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: const Text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'),
              content: const Text(
                '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    await Geolocator.openAppSettings();
                    if (context.mounted) Navigator.pop(context);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFFEE8A9A),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                  child: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', style: TextStyle(color: Colors.white)),
                ),
              ],
            ),
          );
        }
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      Position? position;
      try {
        position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high,
        ).timeout(
          const Duration(seconds: 15),
          onTimeout: () {
            throw TimeoutException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
          },
        );
      } catch (e) {
        if (mounted) {
          Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'),
              backgroundColor: Colors.orange,
            ),
          );
        }
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É
      final petProvider = context.read<PetProvider>();
      bool success = false;
      
      try {
        success = await petProvider.addSighting(
          petId: widget.pet.id,
          latitude: position.latitude,
          longitude: position.longitude,
          userId: authProvider.user!.uid,
        );
      } catch (e) {
        if (mounted) {
          Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${e.toString()}'),
              backgroundColor: Colors.red,
              duration: const Duration(seconds: 5),
            ),
          );
        }
        return;
      }

      if (mounted) {
        Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        
        if (success) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º',
                      style: TextStyle(fontSize: 14),
                    ),
                  ),
                ],
              ),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 4),
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                petProvider.error ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É',
              ),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  Future<void> _openChat() async {
    final authProvider = context.read<AuthProvider>();
    if (authProvider.user == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')),
      );
      return;
    }
    
    final currentUserId = authProvider.user!.uid;
    final receiverId = widget.pet.userId;

    if (currentUserId == receiverId) {
       ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ')),
      );
      return;
    }

    final chatService = ChatService();
    final chatId = await chatService.createOrGetChat(currentUserId, receiverId);

    if (mounted) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => ChatDetailScreen(
            chatId: chatId,
            receiverId: receiverId,
            receiverName: widget.pet.ownerName,
          ),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final authProvider = context.watch<AuthProvider>();
    final favoritesProvider = context.watch<FavoritesProvider>();
    final isFav = authProvider.user != null && favoritesProvider.isFavorite(widget.pet.id);
    final statusColor = widget.pet.status == PetStatus.lost 
        ? const Color(0xFFEE8A9A) 
        : const Color(0xFFD6C9FF);
    
    return Scaffold(
      body: Stack(
        children: [
          SizedBox(
            height: MediaQuery.of(context).size.height * 0.65,
            width: double.infinity,
            child: widget.pet.imageUrls.isNotEmpty
                ? Image.network(
                    widget.pet.imageUrls.first,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) {
                      return Image.asset(
                        'assets/images/pet_image_placeholder.png',
                        fit: BoxFit.cover,
                      );
                    },
                  )
                : Image.asset(
                    'assets/images/pet_image_placeholder.png',
                    fit: BoxFit.cover,
                  ),
          ),
          
          Positioned(
            top: 50,
            left: 16,
            child: CircleAvatar(
              backgroundColor: Colors.white.withOpacity(0.8),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Colors.black),
                onPressed: () => Navigator.of(context).pop(),
              ),
            ),
          ),
          
          Positioned(
            top: 50,
            right: 16,
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: statusColor,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Text(
                widget.pet.status.displayName,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                ),
              ),
            ),
          ),
          
          Align(
            alignment: Alignment.bottomCenter,
            child: Container(
              height: MediaQuery.of(context).size.height * 0.5,
              width: double.infinity,
              decoration: const BoxDecoration(
                 color: Color(0xFFF9E1E1),
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(40),
                  topRight: Radius.circular(40),
                ),
              ),
              child: Padding(
                padding: const EdgeInsets.fromLTRB(24, 40, 24, 24),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                         Expanded(
                           child: Text(
                            widget.pet.petName,
                            style: const TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: Colors.black,
                            ),
                                                   ),
                         ),
                        IconButton(
                          onPressed: () async {
                            if (authProvider.user == null) return;
                            await favoritesProvider.toggleFavorite(authProvider.user!.uid, widget.pet.id);
                          },
                          icon: Icon(
                            isFav ? Icons.favorite : Icons.favorite_border,
                            color: isFav ? Colors.redAccent : Colors.black,
                            size: 32,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '${widget.pet.type.displayName} ‚Ä¢ ${widget.pet.ownerName}',
                      style: const TextStyle(fontSize: 16, color: Colors.grey),
                    ),
                    const SizedBox(height: 16),
                    Expanded(
                      child: SingleChildScrollView(
                        child: Text(
                          widget.pet.description,
                          style: const TextStyle(
                            fontSize: 16, 
                            color: Colors.black,
                            height: 1.4,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    _buildActionButtons(),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        if (widget.pet.status == PetStatus.lost) ...[
           SizedBox(
            width: double.infinity,
            height: 56,
            child: ElevatedButton.icon(
              icon: const Icon(Icons.visibility, color: Colors.white),
              onPressed: _handleSeenSighting,
              label: const Text('–í–∏–¥–µ–ª–∏? –ñ–º–∏—Ç–µ!', style: TextStyle(fontSize: 18, color: Colors.white)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blueAccent,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
              ),
            ),
          ),
          const SizedBox(height: 12),
        ],
        SizedBox(
          width: double.infinity,
          height: 56,
          child: ElevatedButton(
            onPressed: _openChat,
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFEE8A9A),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
            ),
            child: const Text('–ù–∞–ø–∏—Å–∞—Ç—å —Ö–æ–∑—è–∏–Ω—É', style: TextStyle(fontSize: 18, color: Colors.white)),
          ),
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: SizedBox(
                height: 56,
                child: OutlinedButton.icon(
                  icon: const Icon(Icons.share),
                  onPressed: _sharePet,
                  label: const Text('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.black,
                    side: const BorderSide(color: Colors.black),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                  ),
                ),
              ),
            ),
            const SizedBox(width: 12),
             Expanded(
              child: SizedBox(
                height: 56,
                child: OutlinedButton.icon(
                  icon: const Icon(Icons.support_agent),
                  onPressed: _callForHelp,
                  label: const Text('–ü–æ–º–æ—â—å'),
                   style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.black,
                    side: const BorderSide(color: Colors.black),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                  ),
                ),
              ),
            ),
          ],
        )
      ],
    );
  }
}